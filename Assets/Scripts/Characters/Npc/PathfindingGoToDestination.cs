using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using QPathFinder;

public class PathfindingGoToDestination : MonoBehaviour
{

    
    CharacterWalk walk;
    
    public List<Vector3> nodesToDestination = new List<Vector3>();
    public Vector3 currentDestination;
    public int currentDestinationIndex = 0;
    public Animator animator;
   

    private void Start()
    {
        walk = GetComponent<CharacterWalk>();
        
        
    }
   


    private void Update()
    {
        

        if (nodesToDestination.Count > 0)
        {
            float dist = Vector2.Distance(transform.position, currentDestination);
            if (dist >= 0.01f)
            {
                walk.isWalking = true;
                walk.Move();
                if(animator != null)
                    animator.SetBool("isWalking", true);
            }
            else
            {
                currentDestinationIndex++;
                if (currentDestinationIndex < nodesToDestination.Count)
                    SetCurrentDestination(nodesToDestination[currentDestinationIndex]);
                else
                {
                    nodesToDestination.Clear();
                    walk.isWalking = false;
                    if (animator != null)
                        animator.SetBool("isWalking", false);
                }
                    
            }
        }
    }

    public void SetDestination(int nodeID)
    {
        
        Node n = PathFinder.instance.graphData.nodes.Find(dest => dest.autoGeneratedID == nodeID);
        if (n != null)
            GetPathToDestination(n);
        
    }
    
    public void SetDestination(Vector3 position)
    {
        
        GetPathToDestination(position);
        
    }

    void GetPathToDestination(Node node)
    {

        PathFinder.instance.FindShortestPathOfPoints(transform.position, node.Position, PathFinder.instance.graphData.lineType,
            Execution.Asynchronously,
            SearchMode.Simple,
            delegate (List<Vector3> points)
            {
                    
                SetMainDestination(points);
            }
            );
        
    }
    
    void GetPathToDestination(Vector3 position)
    {

        PathFinder.instance.FindShortestPathOfPoints(transform.position, position, PathFinder.instance.graphData.lineType,
            Execution.Asynchronously,
            SearchMode.Simple,
            delegate (List<Vector3> points)
            {
                    
                SetMainDestination(points);
            }
            );
        
    }

    public void SetCurrentDestination(Vector3 position)
    {
        currentDestination = position;
        walk.SetDestination(position, Vector3.zero);
    }

    void SetMainDestination(List<Vector3> nodes)
    {
        nodesToDestination.Clear();
        currentDestinationIndex = 0;
        nodesToDestination = nodes;
        SetCurrentDestination(nodesToDestination[currentDestinationIndex]);
    }
}


